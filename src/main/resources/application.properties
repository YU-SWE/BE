## Application Name
#spring.application.name=demo
#
## MySQL Database Configuration
#spring.datasource.url=jdbc:mysql://database-1.cvkiywg8wb5t.ap-northeast-2.rds.amazonaws.com:3306/yufood
#spring.datasource.username=admin
#spring.datasource.password=yufood!!
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
## JPA Configuration
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.properties.hibernate.format_sql=true
#
## Logging Configuration
#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.orm.jdbc.bind=debug
#logging.level.org.springframework.security=debug
#
## Security Debugging
#spring.security.debug=true
#
## Google OAuth2 Configuration
#spring.security.oauth2.client.registration.google.client-id=1014833639656-5ttut4am78mtltg7vcuj4o4tvg24hvf8.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.registration.google.scope=email,profile
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.client-name=google
#
## OAuth2 Provider Information (optional, included only if needed for advanced use)
## Uncomment if you need to customize the provider (default works for Google)
## spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
## spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
## spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
## spring.security.oauth2.client.provider.google.user-name-attribute=sub
#
#jwt.secret=Z29vZC1sYXVnaC1iZXR0ZXItc2FmZS1zZWNyZXQtMTIzNDU2
#jwt.expiration=86400000
#
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB
#file.upload-dir=uploads
#
#spring.web.resources.static-locations=file:./uploads/
#spring.mvc.static-path-pattern=/uploads/**
#

# Application Name
spring.application.name=demo

# Import .env file
spring.config.import=optional:file:.env[.properties]

naver.passoword=${NAVERPW}

# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://database-1.cvkiywg8wb5t.ap-northeast-2.rds.amazonaws.com:3306/yufood
spring.datasource.username=admin
spring.datasource.password=yufood!!
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Logging Configuration
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=debug
logging.level.org.springframework.security=debug

# Security Debugging
spring.security.debug=true

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=1014833639656-5ttut4am78mtltg7vcuj4o4tvg24hvf8.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Google Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Kakao OAuth2 ??
spring.security.oauth2.client.registration.kakao.client-id=b4f76bbf0abeacb0deb048cbb15f10e0
spring.security.oauth2.client.registration.kakao.client-secret=BCE1JE5tdGCDGDPPiXFgEnEenHa9xOGG
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post

# Kakao Provider ??
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Naver OAuth2 ??
spring.security.oauth2.client.registration.naver.client-id=SLeTTfhsEYCGuE_dVJJ4
spring.security.oauth2.client.registration.naver.client-secret=1i9L26jns7
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email
spring.security.oauth2.client.registration.naver.client-name=Naver

# Naver Provider ??
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# JWT Configuration
jwt.secret=YourVeryLongSecretKeyHereThatShouldBeAtLeast256BitsLongForHS256Algorithm12345678901234567890
jwt.expiration=86400000

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload-dir=uploads

# Static Resources Configuration
spring.web.resources.static-locations=file:./uploads/
spring.mvc.static-path-pattern=/uploads/**

# OAuth2 Session Configuration
spring.session.store-type=none
server.servlet.session.timeout=0

spring.jackson.serialization.fail-on-empty-beans=false

# 메일 설정
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=c74213060@gmail.com
spring.mail.password=ftfm apwt yyev pbvw
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# 인증 코드 만료 시간 (밀리초)
mail.auth-code-expiration-millis=600000

# Redis 설정
spring.redis.host=localhost
spring.redis.port=6379